{
  "info": {
    "name": "Shora AI Payment SDK - Complete API Collection",
    "description": "Comprehensive API collection for Shora AI Payment SDK with all endpoints, authentication, and testing scenarios. Built for enterprise-grade payment processing with AI agents.",
    "version": "1.2.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "key",
        "value": "X-API-Key",
        "type": "string"
      },
      {
        "key": "value",
        "value": "{{api_key}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "https://api.shora.cloud",
      "type": "string"
    },
    {
      "key": "api_key",
      "value": "{{SHORA_API_KEY}}",
      "type": "string"
    },
    {
      "key": "tenant_id",
      "value": "{{TENANT_ID}}",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "description": "Authentication and authorization endpoints",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/v2/test/health",
              "host": ["{{base_url}}"],
              "path": ["v2", "test", "health"]
            },
            "description": "Check API health and connectivity"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/v2/test/health",
                  "host": ["{{base_url}}"],
                  "path": ["v2", "test", "health"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T00:00:00Z\",\n  \"version\": \"1.2.0\"\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Health check returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has status field', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.eql('healthy');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "OAuth2 Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{oauth_username}}\",\n  \"password\": \"{{oauth_password}}\",\n  \"grant_type\": \"password\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v2/auth/login",
              "host": ["{{base_url}}"],
              "path": ["v2", "auth", "login"]
            },
            "description": "OAuth2 authentication for enterprise users"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"enterprise@shora.co\",\n  \"password\": \"secure_password\",\n  \"grant_type\": \"password\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/v2/auth/login",
                  "host": ["{{base_url}}"],
                  "path": ["v2", "auth", "login"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600,\n  \"refresh_token\": \"refresh_token_here\",\n  \"scope\": \"payment:write agent:write\"\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('OAuth2 login returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains access_token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.expect(jsonData).to.have.property('token_type');",
                  "    pm.expect(jsonData.token_type).to.eql('Bearer');",
                  "});",
                  "",
                  "// Store token for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('access_token', jsonData.access_token);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Payment Processing",
      "description": "Core payment processing endpoints",
      "item": [
        {
          "name": "Create Payment Session",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 2999,\n  \"currency\": \"USD\",\n  \"description\": \"AI Service Subscription\",\n  \"customer\": {\n    \"email\": \"customer@example.com\",\n    \"name\": \"John Doe\"\n  },\n  \"metadata\": {\n    \"source\": \"ai_agent\",\n    \"agent_id\": \"agent_123\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/v2/payments/sessions",
              "host": ["{{base_url}}"],
              "path": ["v2", "payments", "sessions"]
            },
            "description": "Create a new payment session for processing payments"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"amount\": 2999,\n  \"currency\": \"USD\",\n  \"description\": \"AI Service Subscription\",\n  \"customer\": {\n    \"email\": \"customer@example.com\",\n    \"name\": \"John Doe\"\n  }\n}"
                },
                "url": {
                  "raw": "{{base_url}}/v2/payments/sessions",
                  "host": ["{{base_url}}"],
                  "path": ["v2", "payments", "sessions"]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"id\": \"session_123456789\",\n  \"status\": \"pending\",\n  \"amount\": 2999,\n  \"currency\": \"USD\",\n  \"payment_url\": \"https://checkout.shora.cloud/session_123456789\",\n  \"created_at\": \"2024-01-01T00:00:00Z\",\n  \"updated_at\": \"2024-01-01T00:00:00Z\"\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Payment session creation returns 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains session ID', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('payment_url');",
                  "});",
                  "",
                  "// Store session ID for subsequent requests",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('session_id', jsonData.id);",
                  "    pm.environment.set('payment_url', jsonData.payment_url);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Process Payment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"sessionId\": \"{{session_id}}\",\n  \"paymentMethod\": \"card\",\n  \"cardToken\": \"{{card_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v2/payments/process",
              "host": ["{{base_url}}"],
              "path": ["v2", "payments", "process"]
            },
            "description": "Process a payment using a payment session"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"sessionId\": \"session_123456789\",\n  \"paymentMethod\": \"card\",\n  \"cardToken\": \"tok_123456789\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/v2/payments/process",
                  "host": ["{{base_url}}"],
                  "path": ["v2", "payments", "process"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"id\": \"payment_123456789\",\n  \"status\": \"completed\",\n  \"amount\": 2999,\n  \"currency\": \"USD\",\n  \"created_at\": \"2024-01-01T00:00:00Z\",\n  \"updated_at\": \"2024-01-01T00:00:00Z\"\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Payment processing returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains payment details', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('amount');",
                  "});",
                  "",
                  "// Store payment ID for audit logs",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('payment_id', jsonData.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "AI Agent Payments",
      "description": "AI agent specific payment endpoints",
      "item": [
        {
          "name": "Create Agent Mandate",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"agent_id\": \"agent_123\",\n  \"max_amount\": 10000,\n  \"currency\": \"USD\",\n  \"expires_at\": \"2024-12-31T23:59:59Z\",\n  \"description\": \"AI Agent Payment Mandate\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v2/agents/mandates",
              "host": ["{{base_url}}"],
              "path": ["v2", "agents", "mandates"]
            },
            "description": "Create a payment mandate for AI agents"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"agent_id\": \"agent_123\",\n  \"max_amount\": 10000,\n  \"currency\": \"USD\",\n  \"expires_at\": \"2024-12-31T23:59:59Z\",\n  \"description\": \"AI Agent Payment Mandate\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/v2/agents/mandates",
                  "host": ["{{base_url}}"],
                  "path": ["v2", "agents", "mandates"]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"id\": \"mandate_123456789\",\n  \"agent_id\": \"agent_123\",\n  \"max_amount\": 10000,\n  \"currency\": \"USD\",\n  \"status\": \"active\",\n  \"expires_at\": \"2024-12-31T23:59:59Z\",\n  \"created_at\": \"2024-01-01T00:00:00Z\"\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Mandate creation returns 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains mandate details', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('agent_id');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.eql('active');",
                  "});",
                  "",
                  "// Store mandate ID for token generation",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('mandate_id', jsonData.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Generate Payment Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mandate_id\": \"{{mandate_id}}\",\n  \"amount\": 500,\n  \"currency\": \"USD\",\n  \"description\": \"AI Service Payment\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v2/agents/tokens",
              "host": ["{{base_url}}"],
              "path": ["v2", "agents", "tokens"]
            },
            "description": "Generate a payment token from a mandate"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"mandate_id\": \"mandate_123456789\",\n  \"amount\": 500,\n  \"currency\": \"USD\",\n  \"description\": \"AI Service Payment\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/v2/agents/tokens",
                  "host": ["{{base_url}}"],
                  "path": ["v2", "agents", "tokens"]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"id\": \"token_123456789\",\n  \"mandate_id\": \"mandate_123456789\",\n  \"value\": \"secure_token_value_here\",\n  \"expires_at\": \"2024-01-02T00:00:00Z\",\n  \"created_at\": \"2024-01-01T00:00:00Z\"\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Token generation returns 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains token details', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('value');",
                  "    pm.expect(jsonData).to.have.property('expires_at');",
                  "});",
                  "",
                  "// Store token for payment processing",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('payment_token', jsonData.value);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Process Agent Payment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"{{payment_token}}\",\n  \"amount\": 500,\n  \"currency\": \"USD\",\n  \"description\": \"AI Service Payment\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v2/agents/pay",
              "host": ["{{base_url}}"],
              "path": ["v2", "agents", "pay"]
            },
            "description": "Process a payment using an agent token"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"token\": \"secure_token_value_here\",\n  \"amount\": 500,\n  \"currency\": \"USD\",\n  \"description\": \"AI Service Payment\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/v2/agents/pay",
                  "host": ["{{base_url}}"],
                  "path": ["v2", "agents", "pay"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"id\": \"agent_payment_123456789\",\n  \"status\": \"completed\",\n  \"amount\": 500,\n  \"currency\": \"USD\",\n  \"created_at\": \"2024-01-01T00:00:00Z\"\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Agent payment returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains payment details', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.eql('completed');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Enterprise Features",
      "description": "Enterprise-grade features for large-scale deployments",
      "item": [
        {
          "name": "Get Audit Logs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/v2/audit?tenant_id={{tenant_id}}&limit=10&offset=0",
              "host": ["{{base_url}}"],
              "path": ["v2", "audit"],
              "query": [
                {
                  "key": "tenant_id",
                  "value": "{{tenant_id}}"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            },
            "description": "Retrieve audit logs for compliance and monitoring"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/v2/audit?tenant_id=1&limit=10&offset=0",
                  "host": ["{{base_url}}"],
                  "path": ["v2", "audit"],
                  "query": [
                    {
                      "key": "tenant_id",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"logs\": [\n    {\n      \"id\": \"audit_123456789\",\n      \"action\": \"payment_created\",\n      \"tenant_id\": 1,\n      \"user_id\": \"user_123\",\n      \"details\": {\n        \"payment_id\": \"payment_123456789\",\n        \"amount\": 500,\n        \"currency\": \"USD\"\n      },\n      \"timestamp\": \"2024-01-01T00:00:00Z\"\n    }\n  ],\n  \"total\": 1,\n  \"limit\": 10,\n  \"offset\": 0\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Audit logs returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains audit logs', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('logs');",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "    pm.expect(jsonData.logs).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Feed Items (Paginated)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/v2/feed/list?tenant_id={{tenant_id}}&limit=10&offset=0&filter=status:active",
              "host": ["{{base_url}}"],
              "path": ["v2", "feed", "list"],
              "query": [
                {
                  "key": "tenant_id",
                  "value": "{{tenant_id}}"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "offset",
                  "value": "0"
                },
                {
                  "key": "filter",
                  "value": "status:active"
                }
              ]
            },
            "description": "Get paginated feed items with filtering"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/v2/feed/list?tenant_id=1&limit=10&offset=0&filter=status:active",
                  "host": ["{{base_url}}"],
                  "path": ["v2", "feed", "list"],
                  "query": [
                    {
                      "key": "tenant_id",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    },
                    {
                      "key": "filter",
                      "value": "status:active"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"items\": [\n    {\n      \"id\": \"feed_123456789\",\n      \"title\": \"Payment Processed\",\n      \"description\": \"Payment of $500 completed successfully\",\n      \"status\": \"active\",\n      \"tenant_id\": 1,\n      \"created_at\": \"2024-01-01T00:00:00Z\"\n    }\n  ],\n  \"total\": 1,\n  \"limit\": 10,\n  \"offset\": 0\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Feed items returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains feed items', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('items');",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "    pm.expect(jsonData.items).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Webhooks",
      "description": "Webhook endpoints for real-time event notifications",
      "item": [
        {
          "name": "Custom Webhook Event",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Webhook-Signature",
                "value": "{{webhook_signature}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"event\": \"audit_tx\",\n  \"data\": {\n    \"payment_id\": \"{{payment_id}}\",\n    \"amount\": 500,\n    \"currency\": \"USD\",\n    \"status\": \"completed\"\n  },\n  \"timestamp\": \"2024-01-01T00:00:00Z\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v2/webhooks/custom",
              "host": ["{{base_url}}"],
              "path": ["v2", "webhooks", "custom"]
            },
            "description": "Send custom webhook events for enterprise integrations"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Webhook-Signature",
                    "value": "sha256=abc123..."
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"event\": \"audit_tx\",\n  \"data\": {\n    \"payment_id\": \"payment_123456789\",\n    \"amount\": 500,\n    \"currency\": \"USD\",\n    \"status\": \"completed\"\n  },\n  \"timestamp\": \"2024-01-01T00:00:00Z\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/v2/webhooks/custom",
                  "host": ["{{base_url}}"],
                  "path": ["v2", "webhooks", "custom"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"status\": \"received\",\n  \"event_id\": \"webhook_123456789\",\n  \"processed_at\": \"2024-01-01T00:00:00Z\"\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Webhook event returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains event status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('event_id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Making request to:', pm.request.url);",
          "",
          "// Set default headers if not present",
          "if (!pm.request.headers.has('Content-Type')) {",
          "    pm.request.headers.add({",
          "        key: 'Content-Type',",
          "        value: 'application/json'",
          "    });",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has valid JSON', function () {",
          "    pm.response.to.be.json;",
          "});",
          "",
          "// Log response for debugging",
          "console.log('Response status:', pm.response.status);",
          "console.log('Response time:', pm.response.responseTime + 'ms');"
        ]
      }
    }
  ]
}
